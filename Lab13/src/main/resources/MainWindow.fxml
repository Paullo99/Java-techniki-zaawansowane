<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ComboBox?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.ListView?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.Pane?>
<?import javafx.scene.text.Font?>
<?language javascript?>

<Pane fx:id="mainPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="646.0" prefWidth="611.0" xmlns="http://javafx.com/javafx/15.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <fx:script>
   	var DirectoryChooser = Java.type("javafx.stage.DirectoryChooser");
      var File = Java.type("java.io.File"); 
      var WishesGenerator = Java.type("com.example.WishesGenerator");
      var StringBuilder = Java.type("java.lang.StringBuilder");
      var BufferedReader = Java.type("java.io.BufferedReader");
      var FileReader = Java.type("java.io.FileReader");
      var Clipboard = Java.type("javafx.scene.input.Clipboard");
      var ClipboardContent = Java.type("javafx.scene.input.ClipboardContent");
      var String = Java.type("java.lang.String");
      var counter = -1;

      function chooseDirectory(){
         var directoryChooser = new DirectoryChooser();
         directoryChooser.setInitialDirectory(new File("."));
         var selectedDirectory = directoryChooser.showDialog(null);
         if (selectedDirectory!=null)
         {
            occasionLabel.setText(selectedDirectory.getName());
            templates = selectedDirectory.listFiles();
            filesList.getItems().clear();
            for(i in templates)
            {
               filesList.getItems().add(templates[i].getName());
            }
         }
      }
      
      var choiceOptions = ["Ręcznie", "Losowo", "Kolejno", "Najkrótsze", "Najdłuższe"];
      var styleOptions = ["Jasny", "Ciemny", "Niebieski"];
      function setOptionsInComboBoxes() {
         for(i in choiceOptions)
               choiceComboBox.getItems().add(choiceOptions[i]);
         choiceComboBox.getSelectionModel().select(0);
         
         for(i in styleOptions)
               styleComboBox.getItems().add(styleOptions[i]);
         styleComboBox.getSelectionModel().select(0);
      }

      function saveWishesToArray(){
         var array = new Array();

         for(i in templates)
         { 
            var sb = new StringBuilder();
            var bf = new BufferedReader(new FileReader(templates[i]));
            var line;
            while((line = bf.readLine())!=null){
               sb.append(new String(line.getBytes(),"UTF-8"));
               sb.append("\n");
            }

            array.push(sb.toString())
         }
         return array;
      }

      function getShortestWishes(){
         var a = saveWishesToArray();
         return a.sort(function(a,b) {return a.length - b.length})[0];
         return a[0];
      }

      function getLongestWishes(){
         var a = saveWishesToArray();
         a.sort(function(a,b) {return a.length - b.length});
         return a[a.length - 1];
      }

      function getRandomWishes(){
         var a = saveWishesToArray();
         var id = Math.floor(Math.random() * a.length);
         return a[id];
      }

      function getConsecutiveWishes(){
         var a = saveWishesToArray();
         counter++;
         if(counter == a.length)
            counter = 0;
         return a[counter];
      }

      function generateWishes(){
         id = choiceComboBox.getSelectionModel().getSelectedIndex();
         var selectedWishes;
         saveWishesToArray();
         switch(id){
            case 0:
               selectedWishes = pickManual();
               break;
            case 1:
               selectedWishes = getRandomWishes();
               break;
            case 2:
               selectedWishes = getConsecutiveWishes();
               break;
            case 3:
               selectedWishes = getShortestWishes();
               break;
            case 4:
               selectedWishes = getLongestWishes();
               break;
            default:
               selectedWishes = getRandomWishes();
               break;
         }
         var fulfilledWishes = selectedWishes.replace("&lt;od&gt;", fromTextField.getText())
                                             .replace("&lt;dla&gt;", forTextField.getText())
                                             .replace("&lt;miejscowosc&gt;", cityTextField.getText())
                                             .replace("&lt;data&gt;", new Date().toLocaleDateString());
         generatedWishesTextArea.setText(fulfilledWishes);

      }
		
		function pickManual(){
         var sb = new StringBuilder();
         id = filesList.getSelectionModel().getSelectedIndex();

         if(id>=0)
         {
            var bf = new BufferedReader(new FileReader(templates[id]));
            var line;
            while((line = bf.readLine())!=null){
               sb.append(new String(line.getBytes(),"UTF-8"));
               sb.append("\n");
            }

            return sb.toString();
         }
      }
		
      function changeStylesheet()
      {
         var scene = mainPane.getScene();
         scene.getStylesheets().clear();
         var index = styleComboBox.getSelectionModel().getSelectedIndex();
         
         if(index==0)
            scene.getStylesheets().add(WishesGenerator.class.getResource("/css/defaultStylesheet.css").toExternalForm());
         else if(index == 1)
            scene.getStylesheets().add(WishesGenerator.class.getResource("/css/darkStylesheet.css").toExternalForm());
         else if(index == 2)
            scene.getStylesheets().add(WishesGenerator.class.getResource("/css/blueStylesheet.css").toExternalForm());
         else
            scene.getStylesheets().add(WishesGenerator.class.getResource("/css/defaultStylesheet.css").toExternalForm());  
      }
      
      function copyToClipBoard(){
         var clipboard = Clipboard.getSystemClipboard();
         var clipboarcontent = new ClipboardContent();
         clipboarcontent.putString(generatedWishesTextArea.getText());
         clipboard.setContent(clipboarcontent);
      }


   </fx:script>
   <children>
      <ListView fx:id="filesList" layoutX="379.0" layoutY="79.0" prefHeight="494.0" prefWidth="219.0" />
      <TextArea fx:id="generatedWishesTextArea" editable="false" layoutX="14.0" layoutY="230.0" prefHeight="343.0" prefWidth="354.0" />
      <TextField fx:id="fromTextField" layoutX="104.0" layoutY="25.0" prefHeight="25.0" prefWidth="208.0" />
      <ComboBox fx:id="styleComboBox" layoutX="447.0" layoutY="611.0" prefWidth="150.0" onAction="changeStylesheet()"/>
      <Label layoutX="447.0" layoutY="594.0" text="Wybierz styl interfejsu:" />
      <Label layoutX="72.0" layoutY="29.0" text="Od:" />
      <Label layoutX="71.0" layoutY="67.0" text="Dla:" />
      <TextField fx:id="forTextField" layoutX="104.0" layoutY="63.0" prefHeight="25.0" prefWidth="208.0" />
      <TextField fx:id="cityTextField" layoutX="104.0" layoutY="104.0" prefHeight="25.0" prefWidth="208.0" />
      <Label layoutX="21.0" layoutY="108.0" text="Miejscowość:" />
      <Button fx:id="generateButton" layoutX="246.0" layoutY="186.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="119.0" text="Generuj życzenia" onAction="generateWishes()" />
      <Button fx:id="occasionChooseButton" layoutX="379.0" layoutY="25.0" mnemonicParsing="false" text="Wybierz okazję" onAction="chooseDirectory()" />
      <Label layoutX="379.0" layoutY="55.0" text="Okazja:" />
      <Label fx:id="occasionLabel" layoutX="427.0" layoutY="55.0" prefHeight="17.0" prefWidth="138.0">
         <font>
            <Font name="System Bold" size="12.0" />
         </font>
      </Label>
      <Label layoutX="17.0" layoutY="149.0" text="Wybór życzeń:" />
      <ComboBox fx:id="choiceComboBox" layoutX="104.0" layoutY="145.0" prefHeight="25.0" prefWidth="208.0" />
      <Button fx:id="copyButton" layoutX="311.0" layoutY="582.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="55.0" text="Kopiuj" onAction="copyToClipBoard()"/>
   </children>

   <!-- Skrypt wykonujący się zaraz po zainicjalizowaniu interfejsu -->
   <fx:script>
      setOptionsInComboBoxes();
   </fx:script>
</Pane>
